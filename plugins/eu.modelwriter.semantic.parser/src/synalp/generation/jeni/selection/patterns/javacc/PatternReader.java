/* Generated By:JavaCC: Do not edit this line. PatternReader.java */
package synalp.generation.jeni.selection.patterns.javacc;

import java.io.*;
import java.util.*;
import synalp.commons.input.*;
import synalp.commons.grammar.*;
import synalp.commons.lexicon.*;
import synalp.commons.semantics.*;
import synalp.commons.unification.*;
import synalp.generation.jeni.selection.patterns.*;
import synalp.generation.jeni.selection.patterns.templates.*;

/**
* A PatternReader reads inputs by parsing them with Javacc.
*/
@SuppressWarnings("all")
public class PatternReader implements PatternReaderConstants {
        /**
	 * The prefix of the symbols that denote variables.
	 */
        public static String VARIABLE_PREFIX = "?";


        public static SelectionPatterns readPatterns(String content) throws Exception
        {
                return parser(content).Patterns();
        }


        /**
	 * Reads the given File as SelectionPatterns.
	 * @param file
	 * @return selection patterns
	 * @throws Exception
	 */
        public static SelectionPatterns readPatterns(File file) throws Exception
        {
                RandomAccessFile f = new RandomAccessFile(file, "r");
                byte[] content = new byte[(int) f.length()];
                f.readFully(content);
                return readPatterns(new String(content));
        }


        /**
		Creates a parser for given String.
	*/
        private static PatternReader parser(String str)
        {
                return new PatternReader(new ByteArrayInputStream(str.getBytes()));
        }

  final public SelectionPatterns Patterns() throws ParseException {
        SelectionPattern pattern = null;
        SelectionPatterns ret = new SelectionPatterns();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      pattern = SelectionPattern();
                                        ret.add(pattern);
    }
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public SelectionPattern SelectionPattern() throws ParseException {
        Token id=null;
        Semantics match;
        boolean isShallow=false;
        SelectionTemplate template;
        Token exclude=null;
        List<SelectionTemplate> templates = new ArrayList<SelectionTemplate>();
    id = jj_consume_token(ID);
    jj_consume_token(23);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXCLUDE:
      jj_consume_token(EXCLUDE);
      exclude = jj_consume_token(ID);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(FOR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SHALLOW:
      jj_consume_token(SHALLOW);
                          isShallow=true;
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    match = Semantics();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SET:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      template = OnlyEquationsTemplate();
                                             templates.add(template);
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSUME:
      case SELECT:
      case COSELECT:
      case REWRITE:
      case COANCHOR:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COANCHOR:
        template = CoanchorTemplate();
                                        templates.add(template);
        break;
      case ASSUME:
        template = AssumptionTemplate();
                                          templates.add(template);
        break;
      case REWRITE:
        template = RewritingTemplate();
                                         templates.add(template);
        break;
      case SELECT:
        template = NormalTemplate();
                                      templates.add(template);
        break;
      case COSELECT:
        template = CoselectionTemplate();
                                           templates.add(template);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                SelectionPattern ret  = new SelectionPattern(match, templates, isShallow);
                ret.setId(id.image);
                if (exclude!=null)
                        ret.setExclude(exclude.image);
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public CoanchorTemplate CoanchorTemplate() throws ParseException {
        Equations equations;
        CoanchorTemplate ret = new CoanchorTemplate();
    jj_consume_token(COANCHOR);
    equations = Equations();
                                          ret.setEquations(equations);
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// an assumption template
  final public AssumptionTemplate AssumptionTemplate() throws ParseException {
        Semantics assumption;
        AssumptionTemplate ret = new AssumptionTemplate();
    jj_consume_token(ASSUME);
    assumption = Semantics();
                ret.setAssumption(assumption);
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// an assumption template
  final public RewritingTemplate RewritingTemplate() throws ParseException {
        Semantics oldSem;
        Semantics newSem;
    jj_consume_token(REWRITE);
    oldSem = Semantics();
    jj_consume_token(BY);
    newSem = Semantics();
                {if (true) return new RewritingTemplate(oldSem, newSem);}
    throw new Error("Missing return statement in function");
  }

// a normal selection template, with lemma, variables constraint, and equations setting
  final public SelectionTemplate NormalTemplate() throws ParseException {
        Trace trace;
        FeatureValue lemma;
        Equations equations;
        SelectionConstraint varConstraint;
        SelectionTemplate ret = new SelectionTemplate();
    jj_consume_token(SELECT);
    trace = Trace();
                                 ret.setTrace(trace);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WITH:
      jj_consume_token(WITH);
      lemma = LemmaArgument();
                                                ret.setLemmaValue(lemma);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHEN:
      jj_consume_token(WHEN);
      varConstraint = SelectionConstraint();
                                                              ret.setVarConstraint(varConstraint);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SET:
      jj_consume_token(SET);
      equations = Equations();
                                              ret.setEquations(equations);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public SelectionTemplate OnlyEquationsTemplate() throws ParseException {
        Equations equations;
        SelectionConstraint varConstraint;
        SelectionTemplate ret = new SelectionTemplate();
    jj_consume_token(SET);
    equations = Equations();
                                      ret.setEquations(equations);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHEN:
      jj_consume_token(WHEN);
      varConstraint = SelectionConstraint();
                                                      ret.setVarConstraint(varConstraint);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
         {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// a coselection template, with a mandatory lemma, variables constraint, and equations setting
  final public CoselectionTemplate CoselectionTemplate() throws ParseException {
        Trace trace;
        FeatureValue lemma;
        Equations equations;
        SelectionConstraint varConstraint;
        CoselectionTemplate ret = new CoselectionTemplate();
    jj_consume_token(COSELECT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPTIONAL:
      jj_consume_token(OPTIONAL);
                                ret.setOptional(true);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    trace = Trace();
                                ret.setTrace(trace);
    jj_consume_token(WITH);
    lemma = LemmaArgument();
                                               ret.setLemmaValue(lemma);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHEN:
      jj_consume_token(WHEN);
      varConstraint = SelectionConstraint();
                                                             ret.setVarConstraint(varConstraint);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SET:
      jj_consume_token(SET);
      equations = Equations();
                                              ret.setEquations(equations);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Set<SelectionConstraint> SelectionConstraints() throws ParseException {
        SelectionConstraint cons;
        Set<SelectionConstraint> ret = new HashSet<SelectionConstraint>();
    cons = SelectionConstraint();
                                      ret.add(cons);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      cons = SelectionConstraint();
                                                                                           ret.add(cons);
    }
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public SelectionConstraint SelectionConstraint() throws ParseException {
        FeatureVariable var;
        FeatureValue val;
    var = Variable();
    jj_consume_token(23);
    val = Argument();
                {if (true) return new SelectionConstraint(var, val);}
    throw new Error("Missing return statement in function");
  }

  final public FeatureValue LemmaArgument() throws ParseException {
        Token token;
        FeatureVariable var;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 24:
      jj_consume_token(24);
      token = jj_consume_token(ID);
      jj_consume_token(24);
                               {if (true) return new FeatureConstant(token.image);}
      break;
    case 26:
      var = Variable();
                           {if (true) return var;}
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Lemma Lemma() throws ParseException {
        Token token;
    jj_consume_token(24);
    token = jj_consume_token(ID);
    jj_consume_token(24);
                {if (true) return new Lemma(token.image);}
    throw new Error("Missing return statement in function");
  }

  final public Trace Trace() throws ParseException {
        Token token;
        Set<String> ret = new HashSet<String>();
    token = jj_consume_token(ID);
                    ret.add(token.image);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      token = jj_consume_token(ID);
                                                                ret.add(token.image);
    }
                {if (true) return new Trace(ret);}
    throw new Error("Missing return statement in function");
  }

  final public Equations Equations() throws ParseException {
        Equation eq;
        Equations ret = new Equations();
    label_6:
    while (true) {
      eq = Equation();
                                       ret.add(eq);
      if (jj_2_1(2)) {
        ;
      } else {
        break label_6;
      }
    }
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Equation Equation() throws ParseException {
        Token nodeId;
        Token fsTypeToken;
        FeatureStructureType fsType;
        FeatureStructure fs;
    nodeId = jj_consume_token(ID);
    jj_consume_token(DOT);
    fsTypeToken = jj_consume_token(FSTYPE);
    jj_consume_token(25);
    fs = FlatFS();
                fsType = fsTypeToken.image.equals("top") ? FeatureStructureType.TOP : FeatureStructureType.BOTTOM;
                {if (true) return new Equation(nodeId.image, fsType, fs);}
    throw new Error("Missing return statement in function");
  }

// we should have the ? global variable prefix here also in parsing!
  final public FeatureValue Argument() throws ParseException {
        Token arg;
        FeatureValue ret;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 26:
      ret = Variable();
      break;
    case ID:
      ret = ConstantPipeSyntax();
      break;
    case 28:
      ret = ConstantCurlyBracketSyntax();
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public FeatureVariable Variable() throws ParseException {
        Token arg;
    jj_consume_token(26);
    arg = jj_consume_token(ID);
                       {if (true) return new FeatureVariable(VARIABLE_PREFIX+arg.image.trim());}
    throw new Error("Missing return statement in function");
  }

// a Constant with syntax: a|b|c
  final public FeatureConstant ConstantPipeSyntax() throws ParseException {
        Token arg;
        Set<String > values = new HashSet<String>();
    arg = jj_consume_token(ID);
                     values.add(arg.image.trim());
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 27:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_7;
      }
      jj_consume_token(27);
      arg = jj_consume_token(ID);
                                                                     values.add(arg.image.trim());
    }
                {if (true) return new FeatureConstant(values);}
    throw new Error("Missing return statement in function");
  }

// a Constant with syntax: {a,b,c}
  final public FeatureConstant ConstantCurlyBracketSyntax() throws ParseException {
        Token arg;
        Set<String > values = new HashSet<String>();
    jj_consume_token(28);
    arg = jj_consume_token(ID);
                         values.add(arg.image.trim());
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMMA);
      arg = jj_consume_token(ID);
                                                                         values.add(arg.image.trim());
    }
    jj_consume_token(29);
                {if (true) return new FeatureConstant(values);}
    throw new Error("Missing return statement in function");
  }

// a flat FS without [], does not contain recursive features
  final public FeatureStructure FlatFSNoBracket() throws ParseException {
        Feature feat;
        FeatureStructure ret = new FeatureStructure();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      feat = FlatFeature();
                             ret.add(feat);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_9;
      }
      jj_consume_token(COMMA);
      feat = FlatFeature();
                                                                            ret.add(feat);
    }
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// a flat FS is enclosed in [], does not contain recursive features
  final public FeatureStructure FlatFS() throws ParseException {
        FeatureStructure ret = new FeatureStructure();
    jj_consume_token(30);
    ret = FlatFSNoBracket();
    jj_consume_token(31);
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// a flat feature is a non-recursive feat
  final public Feature FlatFeature() throws ParseException {
        Token id;
        FeatureValue val;
    id = jj_consume_token(ID);
    jj_consume_token(25);
    val = Argument();
                {if (true) return new Feature(id.image, val);}
    throw new Error("Missing return statement in function");
  }

  final public Semantics Semantics() throws ParseException {
        DefaultLiteral literal;
        Semantics semantics = new Semantics();
    jj_consume_token(30);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
      case 26:
      case 28:
      case 32:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_10;
      }
      literal = Literal();
                                   semantics.add(literal);
    }
    jj_consume_token(31);
          {if (true) return semantics;}
    throw new Error("Missing return statement in function");
  }

// parses a literal that only contains constants or variables
  final public DefaultLiteral Literal() throws ParseException {
        FeatureValue arg = null;
        FeatureValue label = null;
        FeatureValue predicate = null;
        boolean selectional = false;
        List<FeatureValue> args = new ArrayList<FeatureValue>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 32:
      jj_consume_token(32);
              selectional=true;
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    if (jj_2_2(2)) {
      label = Argument();
      jj_consume_token(23);
    } else {
      ;
    }
    predicate = Argument();
    jj_consume_token(33);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
      case 26:
      case 28:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_11;
      }
      arg = Argument();
                                                                                                                   args.add(arg);
    }
    jj_consume_token(34);
                DefaultLiteral ret = new DefaultLiteral();
                if (label!=null)
                        ret.setLabel(label);
                ret.setPredicate(predicate);
                ret.setArguments(args);
                ret.setSelectional(selectional);
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3_1() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(28)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(26)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(27)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_20()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_13()) return true;
    if (jj_scan_token(23)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_3R_18()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public PatternReaderTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[24];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x400000,0x10000,0x20000,0x8000,0x281c00,0x281c00,0x4000,0x2000,0x8000,0x2000,0x40000,0x2000,0x8000,0x40,0x5000000,0x40,0x14400000,0x8000000,0x40,0x400000,0x40,0x14400000,0x0,0x14400000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public PatternReader(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PatternReader(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PatternReaderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public PatternReader(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PatternReaderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public PatternReader(PatternReaderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(PatternReaderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[35];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 24; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 35; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
