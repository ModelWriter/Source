/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = false;}PARSER_BEGIN(PatternReader)package synalp.generation.jeni.selection.patterns.javacc;

import java.io.*;
import java.util.*;
import synalp.commons.input.*;
import synalp.commons.grammar.*;
import synalp.commons.lexicon.*;
import synalp.commons.semantics.*;
import synalp.commons.unification.*;
import synalp.generation.jeni.selection.patterns.*;
import synalp.generation.jeni.selection.patterns.templates.*;

/**
* A PatternReader reads inputs by parsing them with Javacc.
*/
@SuppressWarnings("all")
public class PatternReader{
	/**
	 * The prefix of the symbols that denote variables.
	 */
	public static String VARIABLE_PREFIX = "?";
	
	
 	public static SelectionPatterns readPatterns(String content) throws Exception
 	{
 		return parser(content).Patterns();
 	}
 	
 	
 	/**
	 * Reads the given File as SelectionPatterns.
	 * @param file
	 * @return selection patterns
	 * @throws Exception
	 */
	public static SelectionPatterns readPatterns(File file) throws Exception
	{
		RandomAccessFile f = new RandomAccessFile(file, "r");
		byte[] content = new byte[(int) f.length()];
		f.readFully(content);
		return readPatterns(new String(content));
	}
	

	/**
		Creates a parser for given String.
	*/
 	private static PatternReader parser(String str)
 	{		return new PatternReader(new ByteArrayInputStream(str.getBytes()));
 	}}PARSER_END(PatternReader)SKIP :{  " "| "\r"| "\t"| "\n"
| <"#" (~["\n","\r"])* ("\n" | "\r" | "\r\n")?>}


TOKEN :
{
  <COMMA : ",">
| <DOT : ".">
| <FSTYPE : "top" | "bot">
| <FOR : "for">
| <ASSUME : "assume">
| <SELECT : "select">
| <COSELECT : "coselect">
| <WHEN : "when">
| <WITH : "with">
| <SET : "set">
| <EXCLUDE : "exclude">
| <SHALLOW : "shallow">
| <OPTIONAL : "optional">
| <REWRITE : "rewrite">
| <BY : "by">
| <COANCHOR : "coanchor">
| <ID: (["a"-"z", "A"-"Z", "0"-"9", "_", "-", "+", "\u00C0"-"\u02AF"])+>
}


SelectionPatterns Patterns() :
{
	SelectionPattern pattern = null;
	SelectionPatterns ret = new SelectionPatterns();
}
{
	(pattern = SelectionPattern() { ret.add(pattern);})*
	{
		return ret;
	}
}


SelectionPattern SelectionPattern() :
{
	Token id=null;
	Semantics match;
	boolean isShallow=false;
	SelectionTemplate template;
	Token exclude=null;
	List<SelectionTemplate> templates = new ArrayList<SelectionTemplate>();
}
{
	id=<ID> ":"
	("exclude" exclude=<ID>)? 
	"for" ("shallow" {isShallow=true;})? match = Semantics()
	(template = OnlyEquationsTemplate() {templates.add(template);})* // optional "nude" set equations at the beginning
	
	(template = CoanchorTemplate() {templates.add(template);} |
	 template = AssumptionTemplate() {templates.add(template);} | 
	 template = RewritingTemplate() {templates.add(template);} |
	 template = NormalTemplate() {templates.add(template);} |
	 template = CoselectionTemplate() {templates.add(template);})*
	{
		SelectionPattern ret  = new SelectionPattern(match, templates, isShallow);
		ret.setId(id.image);
		if (exclude!=null)
			ret.setExclude(exclude.image);
		return ret;
	}
}


CoanchorTemplate CoanchorTemplate() :
{
	Equations equations;
	CoanchorTemplate ret = new CoanchorTemplate();
}
{
	"coanchor" equations=Equations() {ret.setEquations(equations);}
	{
		return ret;
	}
} 



// an assumption template
AssumptionTemplate AssumptionTemplate() :
{
	Semantics assumption;
	AssumptionTemplate ret = new AssumptionTemplate();
}
{
	"assume" assumption = Semantics()
	{
		ret.setAssumption(assumption);
		return ret;
	}
}


// an assumption template
RewritingTemplate RewritingTemplate() :
{
	Semantics oldSem;
	Semantics newSem;
}
{
	"rewrite" oldSem = Semantics() "by" newSem = Semantics()
	{
		return new RewritingTemplate(oldSem, newSem);
	}
}


// a normal selection template, with lemma, variables constraint, and equations setting
SelectionTemplate NormalTemplate() :
{
	Trace trace;
	FeatureValue lemma;
	Equations equations;
	SelectionConstraint varConstraint;
	SelectionTemplate ret = new SelectionTemplate();
}
{
	"select" trace=Trace() { ret.setTrace(trace); }
		("with" lemma=LemmaArgument() { ret.setLemmaValue(lemma); })? 
		("when" varConstraint=SelectionConstraint() { ret.setVarConstraint(varConstraint);})?
		("set" equations=Equations() {ret.setEquations(equations);})?
	{
		return ret;
	}
}


SelectionTemplate OnlyEquationsTemplate() :
{
	Equations equations;
	SelectionConstraint varConstraint;
	SelectionTemplate ret = new SelectionTemplate();
}
{
	"set" equations=Equations() { ret.setEquations(equations); }
	("when" varConstraint=SelectionConstraint() { ret.setVarConstraint(varConstraint);})?
	
	{return ret;}
}


// a coselection template, with a mandatory lemma, variables constraint, and equations setting
CoselectionTemplate CoselectionTemplate() :
{
	Trace trace;
	FeatureValue lemma;
	Equations equations;
	SelectionConstraint varConstraint;
	CoselectionTemplate ret = new CoselectionTemplate();
}
{
	"coselect" ("optional" {ret.setOptional(true);})?
		trace=Trace() { ret.setTrace(trace); }
		"with" lemma=LemmaArgument() { ret.setLemmaValue(lemma); }
		("when" varConstraint=SelectionConstraint() {ret.setVarConstraint(varConstraint);})?
		("set" equations=Equations() {ret.setEquations(equations);})?
	{
		return ret;
	}
}



Set<SelectionConstraint> SelectionConstraints() :
{
	SelectionConstraint cons;
	Set<SelectionConstraint> ret = new HashSet<SelectionConstraint>();
}
{
	cons = SelectionConstraint() {ret.add(cons);} (<COMMA> cons=SelectionConstraint() {ret.add(cons);})*
	{
		return ret;
	}
}


SelectionConstraint SelectionConstraint():
{
	FeatureVariable var;
	FeatureValue val;
}
{
	var = Variable() ":" val=Argument()
	{
		return new SelectionConstraint(var, val);
	}
}


FeatureValue LemmaArgument():
{
	Token token;
	FeatureVariable var;
}
{
	"\"" token=<ID> "\"" { return new FeatureConstant(token.image); } |
	var = Variable() { return var; }
	
}


Lemma Lemma() :
{
	Token token;
}
{
	"\"" token=<ID> "\""
	{
		return new Lemma(token.image);
	}
}


Trace Trace() :
{
	Token token;
	Set<String> ret = new HashSet<String>();
}
{
	token=<ID> {ret.add(token.image);} (<COMMA> token=<ID> {ret.add(token.image);})*
	{
		return new Trace(ret);
	}
}



Equations Equations() :
{
	Equation eq;
	Equations ret = new Equations();
}
{
	(LOOKAHEAD(2) eq = Equation() {ret.add(eq);})+
	{
		return ret;
	}	
}


Equation Equation() :
{
	Token nodeId;
	Token fsTypeToken;
	FeatureStructureType fsType;
	FeatureStructure fs;
}
{
	nodeId=<ID> <DOT> fsTypeToken=<FSTYPE> "=" fs=FlatFS()
	{
		fsType = fsTypeToken.image.equals("top") ? FeatureStructureType.TOP : FeatureStructureType.BOTTOM;
		return new Equation(nodeId.image, fsType, fs);
	}
}




// we should have the ? global variable prefix here also in parsing!
FeatureValue Argument() :
{
	Token arg;
	FeatureValue ret;
}
{
	(ret = Variable() | ret = ConstantPipeSyntax() | ret = ConstantCurlyBracketSyntax())
	{		return ret;
	}
}


FeatureVariable Variable() :
{	Token arg;
}
{	"?" arg=<ID> { return new FeatureVariable(VARIABLE_PREFIX+arg.image.trim()); }
}


// a Constant with syntax: a|b|c
FeatureConstant ConstantPipeSyntax() :
{	Token arg;
	Set<String > values = new HashSet<String>();
}
{	arg = <ID> { values.add(arg.image.trim()); } ("|" arg=<ID> { values.add(arg.image.trim()); })*
	{		return new FeatureConstant(values);
	}
}


// a Constant with syntax: {a,b,c}
FeatureConstant ConstantCurlyBracketSyntax() :
{	Token arg;
	Set<String > values = new HashSet<String>();
}
{	"{" arg = <ID> { values.add(arg.image.trim()); } ("," arg=<ID> { values.add(arg.image.trim()); })* "}"
	{
		return new FeatureConstant(values);
	}
}


// a flat FS without [], does not contain recursive features
FeatureStructure FlatFSNoBracket() :
{
	Feature feat;
	FeatureStructure ret = new FeatureStructure();
}
{
	(feat=FlatFeature() {ret.add(feat);})? (<COMMA> feat=FlatFeature() {ret.add(feat);})*
	{
		return ret;
	}	
}


// a flat FS is enclosed in [], does not contain recursive features
FeatureStructure FlatFS() :
{
	FeatureStructure ret = new FeatureStructure();
}
{
	"[" ret=FlatFSNoBracket() "]"
	{
		return ret;
	}	
}


// a flat feature is a non-recursive feat
Feature FlatFeature() :
{
	Token id;
	FeatureValue val;
}
{
	id=<ID> "=" val=Argument()
	{
	 	return new Feature(id.image, val);
	}
}




Semantics Semantics() :
{
  	DefaultLiteral literal;
	Semantics semantics = new Semantics();
}
{
	"[" (literal = Literal() { semantics.add(literal); })* "]"
	{
	  return semantics;
	} 
}


// parses a literal that only contains constants or variables
DefaultLiteral Literal() :
{
  	FeatureValue arg = null;
  	FeatureValue label = null;
  	FeatureValue predicate = null;
  	boolean selectional = false;
  	List<FeatureValue> args = new ArrayList<FeatureValue>();
}
{
	("~" {selectional=true;})? (LOOKAHEAD(2) label=Argument() ":")? predicate=Argument() "(" (arg=Argument() { args.add(arg); })* ")" 
	{
	  	DefaultLiteral ret = new DefaultLiteral();
	  	if (label!=null)
	  		ret.setLabel(label);
	  	ret.setPredicate(predicate);
	  	ret.setArguments(args);
	  	ret.setSelectional(selectional);
	  	return ret;
	}
}

