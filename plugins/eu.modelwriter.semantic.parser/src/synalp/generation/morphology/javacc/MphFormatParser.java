/* Generated By:JavaCC: Do not edit this line. MphFormatParser.java */
package synalp.generation.morphology.javacc;

import java.io.*;
import java.util.*;
import synalp.commons.input.*;
import synalp.commons.lexicon.*;
import synalp.commons.semantics.*;
import synalp.commons.unification.*;
import synalp.generation.morphology.*;
import synalp.generation.configuration.*;

/**
* An MphParser reads inputs by parsing them with Javacc.
*/
@SuppressWarnings("all")
public class MphFormatParser implements MphFormatParserConstants {
        /**
	 *	The name of the feature denoting the category.
	 */
        public static String CAT_FEATURE = "cat";


        public static MorphLexicon readLexicon(File file) throws Exception
        {
                return new MphFormatParser(new FileInputStream(file)).MorphLexicon();
        }


        public static MorphLexicon readLexicon(String content) throws Exception
        {
                return parser(content).MorphLexicon();
        }

        /**
	 * Reads a fs in mph format without the brackets, from given String.
	 */
        public static FeatureStructure readFeatureStructure(String content) throws Exception
        {
                return parser(content).FlatFSNoBracket();
        }


        /**
		Creates a parser for given String.
	*/
        private static MphFormatParser parser(String str)
        {
                return new MphFormatParser(new ByteArrayInputStream(str.getBytes()));
        }

  final public MorphLexicon MorphLexicon() throws ParseException {
        MorphLexicon ret = new MorphLexicon();
        MorphLexiconEntry entry;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      entry = MorphLexiconEntry();
                                       ret.add(entry);
    }
                {if (true) return ret ;}
    throw new Error("Missing return statement in function");
  }

  final public MorphLexiconEntry MorphLexiconEntry() throws ParseException {
        Token firstTok;
        Token secondTok;
        FeatureStructure fs=null;
    firstTok = jj_consume_token(ID);
    secondTok = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      fs = FlatFS();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
                if (fs==null)
                        fs = new FeatureStructure();
                if (GeneratorOption.MORPH_LEXICON_ORDER == MorphLexiconOrder.LEXEM_FIRST)
                        {if (true) return new MorphLexiconEntry(new Lemma(secondTok.image), new Lexem(firstTok.image, fs));}
                else {if (true) return new MorphLexiconEntry(new Lemma(firstTok.image), new Lexem(secondTok.image, fs));}
    throw new Error("Missing return statement in function");
  }

// a flat FS is enclosed in [], does not contain recursive features
  final public FeatureStructure FlatFS() throws ParseException {
        FeatureStructure ret = new FeatureStructure();
    jj_consume_token(7);
    ret = FlatFSNoBracket();
    jj_consume_token(8);
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// a flat FS without [], does not contain recursive features
  final public FeatureStructure FlatFSNoBracket() throws ParseException {
        Feature feat;
        FeatureStructure ret = new FeatureStructure();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      feat = FlatFeature();
                             ret.add(feat);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 9:
        jj_consume_token(9);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      feat = FlatFeature();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 9:
        jj_consume_token(9);
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
                                                                                   ret.add(feat);
    }
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// a flat feature is a non-recursive feat
  final public Feature FlatFeature() throws ParseException {
        Token id;
        FeatureValue val;
    id = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 10:
      jj_consume_token(10);
      break;
    case 11:
      jj_consume_token(11);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    val = Argument();
                {if (true) return new Feature(id.image, val);}
    throw new Error("Missing return statement in function");
  }

// only feature constant
  final public FeatureConstant Argument() throws ParseException {
        Token arg;
        FeatureConstant ret;
        Set<String> values = new HashSet<String>();
    arg = jj_consume_token(ID);
                    values.add(arg.image.trim());
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 12:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      jj_consume_token(12);
      arg = jj_consume_token(ID);
                                                                     values.add(arg.image.trim());
    }
          {if (true) return new FeatureConstant(values);}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public MphFormatParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40,0x80,0x200,0x40,0x40,0x200,0xc00,0x1000,};
   }

  /** Constructor with InputStream. */
  public MphFormatParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MphFormatParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MphFormatParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MphFormatParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MphFormatParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MphFormatParser(MphFormatParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MphFormatParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[13];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 13; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
