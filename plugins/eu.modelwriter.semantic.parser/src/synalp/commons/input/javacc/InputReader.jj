/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = false;}PARSER_BEGIN(InputReader)package synalp.commons.input.javacc;

import java.io.*;
import java.util.*;
import synalp.commons.input.*;
import synalp.commons.lexicon.*;
import synalp.commons.semantics.*;
import synalp.commons.unification.*;

/**
* An InputReader reads inputs by parsing them with Javacc.
*/
@SuppressWarnings("all")
public class InputReader{
	/**
	 * The prefix of the symbols that denote variables.
	 */
	public static String VARIABLE_PREFIX = "?";
	
	public static TestSuite readTestSuite(String content) throws Exception
 	{
		return parser(content).TestSuite();
 	}
 	
	public static TestSuiteEntry readTestSuiteEntry(String content) throws Exception
 	{
		return parser(content).TestSuiteEntry();
 	}
 	public static DefaultLiteral readLiteral(String content) throws Exception
 	{		return parser(content).Literal();
 	}

 	public static Semantics readSemantics(String content) throws Exception
 	{
		return parser(content).Semantics();
 	}


	/**
		Creates a parser for given String.
	*/
 	private static InputReader parser(String str)
 	{		return new InputReader(new ByteArrayInputStream(str.getBytes()));
 	}}PARSER_END(InputReader)SKIP :{  " "| "\r"| "\t"| "\n"
| <"#" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>}

// we should have lexical states to better handle the free text
TOKEN :
{
  <COMMA : ",">
| <DOT : ".">
| <FSTYPE : "top" | "bot">
| <ID: (["a"-"z", "A"-"Z", "0"-"9", "_", "-",  ".", "+", "'", "\u00C0"-"\u02AF"])+>
| <TEXT : "[" (~["(", ")", ":", "=", "[", "]"])+ "]"> // free text enclosed in "[" "]"
}




TestSuite TestSuite() :
{
 	boolean first=false;
 	boolean only=false;
 	boolean strict=false;
 	boolean morph = false;
 	boolean ignore=false;
 	boolean start=false;
	TestSuiteEntry entry;
	TestSuite ret = new TestSuite();
}
{
	(
	  ("@start" { start=true;})?
	  ("@ignore" { ignore=true; })? 
	  ("@first" { first=true; })?
	  ("@only" { only=true;})?
	  ("@morph" { morph=true;})?
	  ("@stop" { return ret;})?
	  ("@strict" {strict=true;})?
	  ("@loose" {strict=false;})? // this is the default when none are set and used only to explicit it	  	entry = TestSuiteEntry()
	{
	  if (start)
	     ret.clear();
	
	  if (!ignore)
	  {
	    if (strict)
	    	entry.setStrict(true);
	    if (morph)
	    	entry.setMorph(true);
	    if (only)
		  {
			ret = new TestSuite();
			ret.add(entry);
			return ret;
		  }
	  	if (first)
			ret.add(0, entry);
		else ret.add(entry);
	  }
	  
		first=false;
		strict=false;
		only=false;
		ignore=false;
		morph=false;
		start=false;
	} 

	)+

	{
		return ret;
	}
}


TestSuiteEntry TestSuiteEntry() :
{
	Token id;
	Semantics semantics;
	List<String> sentences = new ArrayList<String>();
}
{ 	   
	id=<ID>
	"semantics:[" semantics=Semantics() "]"
	("sentence:" sentences=Sentences())? // the "[" and "]" are included in text
	{
	  	return new TestSuiteEntry(id.image, semantics, sentences);
	}
}


// the free text is split around ",", we maybe could do it differently, I did it this way to prevent clash between <ID> and <TEXT>
List<String > Sentences() :
{
	Token token=null;
}
{
	(token=<TEXT>)?
	{
		if (token==null)
			return new ArrayList<String>();
			
		String content = token.image.substring(1).substring(0, token.image.length()-2);
		List<String > ret = new ArrayList<String>();
		for(String str : content.split(","))
			ret.add(str.trim());
		return ret;
	}
}


Semantics Semantics() :
{
  	DefaultLiteral literal;	Semantics semantics = new Semantics();
}
{	(literal = Literal() { semantics.add(literal); })*
	{
	  return semantics;	} 
}


// parses a literal that only contains constants or variables
DefaultLiteral Literal() :
{
  	FeatureValue arg = null;
  	FeatureValue label = null;
  	FeatureValue predicate = null;
  	boolean selectional = false;
  	List<FeatureValue> args = new ArrayList<FeatureValue>();
}
{
	("~" {selectional=true;})? (LOOKAHEAD(2) label=Argument() ":")? predicate=Argument() "(" (arg=Argument() { args.add(arg); })* ")" 
	{
	  	DefaultLiteral ret = new DefaultLiteral();
	  	if (label!=null)
	  		ret.setLabel(label);
	  	ret.setPredicate(predicate);
	  	ret.setArguments(args);
	  	ret.setSelectional(selectional);
	  	return ret;
	}
}


// we should have the ? global variable prefix here also in parsing!
FeatureValue Argument() :
{
	Token arg;
	FeatureValue ret;
}
{
	(ret = Variable() | ret = ConstantPipeSyntax() | ret = ConstantCurlyBracketSyntax())
	{		return ret;
	}
}


FeatureVariable Variable() :
{	Token arg;
}
{	"?" arg=<ID> { return new FeatureVariable(VARIABLE_PREFIX+arg.image.trim()); }
}


// a Constant with syntax: a|b|c
FeatureConstant ConstantPipeSyntax() :
{	Token arg;
	Set<String > values = new HashSet<String>();
}
{	arg = <ID> { values.add(arg.image.trim()); } ("|" arg=<ID> { values.add(arg.image.trim()); })*
	{		return new FeatureConstant(values);
	}
}


// a Constant with syntax: {a,b,c}
FeatureConstant ConstantCurlyBracketSyntax() :
{	Token arg;
	Set<String > values = new HashSet<String>();
}
{	"{" arg = <ID> { values.add(arg.image.trim()); } ("," arg=<ID> { values.add(arg.image.trim()); })* "}"
	{
		return new FeatureConstant(values);
	}
}


// a flat FS without [], does not contain recursive features
FeatureStructure FlatFSNoBracket() :
{
	Feature feat;
	FeatureStructure ret = new FeatureStructure();
}
{
	(feat=FlatFeature() {ret.add(feat);})? (<COMMA> feat=FlatFeature() {ret.add(feat);})*
	{
		return ret;
	}	
}


// a flat FS is enclosed in [], does not contain recursive features
FeatureStructure FlatFS() :
{
	FeatureStructure ret = new FeatureStructure();
}
{
	"[" ret=FlatFSNoBracket() "]"
	{
		return ret;
	}	
}


// a flat feature is a non-recursive feat
Feature FlatFeature() :
{
	Token id;
	FeatureValue val;
}
{
	id=<ID> "=" val=Argument()
	{
	 	return new Feature(id.image, val);
	}
}
